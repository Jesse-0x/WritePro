{"version":3,"file":"index-e12b288f.js","sources":["../../../../node_modules/@unhead/vue/dist/index.mjs"],"sourcesContent":["import { whitelistSafeInput, unpackMeta, composableNames } from 'unhead';\nexport { createHeadCore } from 'unhead';\nimport { u as useHead, h as headSymbol, r as resolveUnrefHeadInput, s as serverUseHead } from './shared/vue.505b826e.mjs';\nexport { V as VueReactiveUseHeadPlugin, a as createHead, c as createServerHead, i as injectHead } from './shared/vue.505b826e.mjs';\nimport { getCurrentInstance, ref, watchEffect } from 'vue';\nimport { asArray } from '@unhead/shared';\n\nconst VueHeadMixin = {\n  created() {\n    const instance = getCurrentInstance();\n    if (!instance)\n      return;\n    const options = instance.type;\n    if (!options || !(\"head\" in options))\n      return;\n    const source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\n    useHead(source);\n  }\n};\n\nconst Vue2ProvideUnheadPlugin = function(_Vue, head) {\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      const origProvide = options.provide;\n      options.provide = function() {\n        let origProvideResult;\n        if (typeof origProvide === \"function\")\n          origProvideResult = origProvide.call(this);\n        else\n          origProvideResult = origProvide || {};\n        return {\n          ...origProvideResult,\n          [headSymbol]: head\n        };\n      };\n    }\n  });\n};\n\nfunction useHeadSafe(input, options = {}) {\n  return useHead(input, { ...options, transform: whitelistSafeInput });\n}\n\nfunction useSeoMeta(input, options) {\n  const headInput = ref({});\n  watchEffect(() => {\n    const resolvedMeta = resolveUnrefHeadInput(input);\n    const { title, titleTemplate, ...meta } = resolvedMeta;\n    headInput.value = {\n      title,\n      titleTemplate,\n      meta: unpackMeta(meta)\n    };\n  });\n  return useHead(headInput, options);\n}\n\nfunction useServerHead(input, options = {}) {\n  return serverUseHead(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerHeadSafe(input, options = {}) {\n  return useHeadSafe(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerSeoMeta(input, options) {\n  return useSeoMeta(input, { ...options || {}, mode: \"server\" });\n}\n\nfunction useTagTitle(title) {\n  return useHead({ title });\n}\nfunction useTitleTemplate(titleTemplate) {\n  return useHead({ titleTemplate });\n}\nfunction useTagMeta(meta) {\n  return useHead({ meta: asArray(meta) });\n}\nfunction useTagMetaFlat(meta) {\n  const input = ref({});\n  watchEffect(() => {\n    input.value = unpackMeta(resolveUnrefHeadInput(meta));\n  });\n  return useHead({ meta: input });\n}\nfunction useTagLink(link) {\n  return useHead({ link: asArray(link) });\n}\nfunction useTagScript(script) {\n  return useHead({ script: asArray(script) });\n}\nfunction useTagStyle(style) {\n  return useHead({ style: asArray(style) });\n}\nfunction useTagNoscript(noscript) {\n  return useHead({ noscript: asArray(noscript) });\n}\nfunction useTagBase(base) {\n  return useHead({ base });\n}\nfunction useHtmlAttrs(attrs) {\n  return useHead({ htmlAttrs: attrs });\n}\nfunction useBodyAttrs(attrs) {\n  return useHead({ bodyAttrs: attrs });\n}\nfunction useServerTagTitle(title) {\n  return useServerHead({ title });\n}\nfunction useServerTitleTemplate(titleTemplate) {\n  return useServerHead({ titleTemplate });\n}\nfunction useServerTagMeta(meta) {\n  return useServerHead({ meta: asArray(meta) });\n}\nfunction useServerTagMetaFlat(meta) {\n  const input = ref({});\n  watchEffect(() => {\n    input.value = unpackMeta(resolveUnrefHeadInput(meta));\n  });\n  return useServerHead({ meta: input });\n}\nfunction useServerTagLink(link) {\n  return useServerHead({ link: asArray(link) });\n}\nfunction useServerTagScript(script) {\n  return useServerHead({ script: asArray(script) });\n}\nfunction useServerTagStyle(style) {\n  return useServerHead({ style: asArray(style) });\n}\nfunction useServerTagNoscript(noscript) {\n  return useServerHead({ noscript: asArray(noscript) });\n}\nfunction useServerTagBase(base) {\n  return useServerHead({ base });\n}\nfunction useServerHtmlAttrs(attrs) {\n  return useServerHead({ htmlAttrs: attrs });\n}\nfunction useServerBodyAttrs(attrs) {\n  return useHead({ bodyAttrs: attrs });\n}\n\nconst coreComposableNames = [\n  \"injectHead\"\n];\nconst unheadVueComposablesImports = {\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\n};\n\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, headSymbol, resolveUnrefHeadInput, unheadVueComposablesImports, useBodyAttrs, useHead, useHeadSafe, useHtmlAttrs, useSeoMeta, useServerBodyAttrs, useServerHead, useServerHeadSafe, useServerHtmlAttrs, useServerSeoMeta, useServerTagBase, useServerTagLink, useServerTagMeta, useServerTagMetaFlat, useServerTagNoscript, useServerTagScript, useServerTagStyle, useServerTagTitle, useServerTitleTemplate, useTagBase, useTagLink, useTagMeta, useTagMetaFlat, useTagNoscript, useTagScript, useTagStyle, useTagTitle, useTitleTemplate };\n"],"names":[],"mappings":";;AAiJA,MAAM,sBAAsB;AAAA,EAC1B;AACF;AAAA,CACoC;AAAA,EAClC,eAAe,CAAC,GAAG,qBAAqB,GAAG,eAAe;AAC5D;","x_google_ignoreList":[0]}